




#include <stdio.h>
#include <stdlib.h>
#include <conio.h> // Para usar _kbhit e _getch
#include <windows.h> // Para a função Sleep

// Definindo a estrutura da cobra
typedef struct SnakePart {
    int x, y; // Coordenadas x e y
    struct SnakePart *next; // Ponteiro para a próxima parte do corpo
} SnakePart;

// Definindo a estrutura do alimento
typedef struct Food {
    int x, y; // Coordenadas do alimento
} Food;

// Variáveis globais
int width = 20, height = 20; // Dimensões do tabuleiro
SnakePart *snake = NULL; // Ponteiro para a cabeça da cobra
Food food; // Alimento
int gameOver = 0; // Flag para verificar se o jogo acabou
int score = 0; // Pontuação

// Função para inicializar o jogo
void initializeGame() {
    // Inicializa a cobra
    snake = (Snak…



####################
#                  #
#                  #
#                  #
#                  #
####################

[19:22, 23/10/2024] Pedro Amaral:

[19:22, 23/10/2024] Pedro Amaral:

 ####################
#   ####           #
#                  #
#        #######    #
#                  #
####################



#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <windows.h>

#define MAX_WIDTH 20
#define MAX_HEIGHT 20

char board[MAX_HEIGHT][MAX_WIDTH]; // Matriz para o tabuleiro
int currentLevel = 1; // Nível atual

// Função para carregar uma fase de um arquivo
void loadLevel(int level) {
    char filename[20];
    sprintf(filename, "fase%d.txt", level); // Gera o nome do arquivo com base no número da fase
    FILE *file = fopen(filename, "r");

    if (file == NULL) {
        printf("Erro ao carregar a fase %d!\n", level);
        exit(1);
    }

    for (int i = 0; i < MAX_HEIGHT; i++) {
        for (int j = 0; j < MAX_WIDTH; j++) {
            fscanf(file, " %c", &board[i][j]);
        }
    }

    fclose(file);
}

// Função para desenhar o tabul…
 Fase 3
void checkNextLevel() {
    if (score >= 5) { // Exemplo: Quando o jogador atingir 5 pontos, muda de fase
        currentLevel++;
        if (currentLevel > 5) {
            printf("Parabéns! Você completou todas as fases!\n");
            gameOver = 1;
        } else {
            printf("Carregando a fase %d...\n", currentLevel);
            loadLevel(currentLevel); // Carrega a próxima fase
            Sleep(2000); // Espera 2 segundos antes de iniciar a próxima fase
        }
    }
}
Fase 4
int main() {
    char direction = 'R'; // Direção inicial
    initializeGame();
    loadLevel(currentLevel); // Carrega a primeira fase

    while (!gameOver) {
        drawBoard();
        input(&direction);
        moveSnake(direction);
        checkNextLevel(); // Verifica se é hora de passar para a próxima fase
        Sleep(100); // Controla a velocidade do jogo
    }

    printf("Game Over! Pontuação final: %d\n", score);
    return 0;
}
####################
#                  #
#                  #
#                  #
#                  #
####################
####################
#   ####           #
#                  #
#        #######    #
#                  #
####################





[19:26, 23/10/2024] Pedro Amaral: Jogo completo
 




#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <windows.h>

#define MAX_WIDTH 20
#define MAX_HEIGHT 20

typedef struct SnakePart {
    int x, y;
    struct SnakePart *next;
} SnakePart;

typedef struct Food {
    int x, y;
} Food;

char board[MAX_HEIGHT][MAX_WIDTH];
int currentLevel = 1;
int score = 0;
int gameOver = 0;
SnakePart *snake = NULL;
Food food;

// Função para inicializar a cobra e o alimento
void initializeGame() {
    snake = (SnakePart *)malloc(sizeof(SnakePart));
    snake->x = MAX_WIDTH / 2;
    snake->y = MAX_HEIGHT / 2;
    snake->next = NULL;

    food.x = rand() % MAX_WIDTH;
    food.y = rand() % MAX_HEIGHT;
}

// Função para carregar uma fase de arquivo
void loadLevel(int level) {
    char filename[20];
    sprintf(fi…


Fase 1 
####################
#                  #
#                  #
#                  #
#                  #
####################

Fase 2
####################
#   ####           #
#                  #
#        #######    #
#                  #
####################

Fase 3

####################
#  #####           #
#                  #
#    #######       #
#       ###        #
####################

Fase 4

####################
#   ##             #
#     ####         #
#         #####    #
#            ##    #
####################


Fase 5

####################
#   ####    ####   #
#       ####       #
#   ###########    #
#   ###     ###    #
####################



 Executa
gcc snake_game.c -o snake_game
./snake_game





[19:52, 23/10/2024] Pedro Amaral: Terminei jogo snake
[19:52, 23/10/2024] Pedro Amaral: Agora jogo tabuleiro
[19:53, 23/10/2024] Pedro Amaral: #include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define BOARD_SIZE 8

char board[BOARD_SIZE][BOARD_SIZE]; // Tabuleiro de 8x8

// Função para inicializar o tabuleiro
void initializeBoard() {
    for (int i = 0; i < BOARD_SIZE; i++) {
        for (int j = 0; j < BOARD_SIZE; j++) {
            if (i < 3 && (i + j) % 2 != 0) {
                board[i][j] = 'p'; // Peças do jogador 1 (pretas)
            } else if (i > 4 && (i + j) % 2 != 0) {
                board[i][j] = 'b'; // Peças do jogador 2 (brancas)
            } else {
                board[i][j] = ' '; // Espaços vazios
            }
        }
    }
}

// Função para desenhar o tabuleiro
void drawBoard() {
    printf("   A B C D E F G H\n");
    for (int i = 0; i < BOARD_SIZE; i++) {
   …
[19:54, 23/10/2024] Pedro Amaral: Movimentos jogar
[19:54, 23/10/2024] Pedro Amaral: Jogador 1, faça sua jogada.
Escolha a peça (ex: A1): B6
Escolha o destino (ex: B2): A5